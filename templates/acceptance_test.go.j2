package aci

import (
	"fmt"
	"testing"

	"github.com/ciscoecosystem/aci-go-client/client"
	"github.com/ciscoecosystem/aci-go-client/models"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
)



{%- set basic_arg_list -%}
{% for arg in hierarchy %}{{ arg['name']|snakify }}_name{%- if loop.index != hierarchy|length -%},{{ " " }}{%- endif -%}{% endfor %}
{%- endset %}





func TestAccAci{{ doc.slug_label }}_Basic(t *testing.T) {
	var {{ doc.slug_label|snakify }} models.{{ doc.slug_label }}
	description := "{{ hierarchy[-1]['label']|snakify }} created while acceptance testing"

	resource.Test(t, resource.TestCase{
		PreCheck:	  func(){ testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckAci{{ doc.slug_label }}Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAccCheckAci{{ doc.slug_label }}Config_basic(description),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckAci{{ doc.slug_label }}Exists("aci_{{ hierarchy[-1]['label']|snakify }}.foo{{ hierarchy[-1]['label']|snakify }}", &{{ doc.slug_label|snakify }}),
					testAccCheckAci{{ doc.slug_label }}Attributes(description, &{{ doc.slug_label|snakify }}),
				),
			},
			{
				ResourceName:      "aci_{{doc.slug_label|snakify}}",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccAci{{ doc.slug_label }}_update(t *testing.T) {
	var {{ doc.slug_label|snakify }} models.{{ doc.slug_label }}
	description := "{{ hierarchy[-1]['label']|snakify }} created while acceptance testing"

	resource.Test(t, resource.TestCase{
		PreCheck: func() { testAccPreCheck(t)},
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckAci{{ doc.slug_label }}Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAccCheckAci{{ doc.slug_label }}Config_basic(description),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckAci{{ doc.slug_label }}Exists("aci_{{ hierarchy[-1]['label']|snakify }}.foo{{ hierarchy[-1]['label']|snakify }}", &{{ doc.slug_label|snakify }}),
					testAccCheckAci{{ doc.slug_label }}Attributes(description, &{{ doc.slug_label|snakify }}),
				),
			},
			{
				Config: testAccCheckAci{{ doc.slug_label }}Config_basic(description),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckAci{{ doc.slug_label }}Exists("aci_{{ hierarchy[-1]['label']|snakify }}.foo{{ hierarchy[-1]['label']|snakify }}", &{{ doc.slug_label|snakify }}),
					testAccCheckAci{{ doc.slug_label }}Attributes(description, &{{ doc.slug_label|snakify }}),
				),
			},
		},
	})
}

func testAccCheckAci{{ doc.slug_label }}Config_basic(description string) string {
	return fmt.Sprintf(`

	resource "aci_{{ doc.slug_label|snakify }}" "foo{{ doc.slug_label|snakify }}" {
		{% if hierarchy| length > 1 -%}
		{{"  "+hierarchy[-2]["label"]|snakify}}_dn  = "${aci_{{hierarchy[-2]["label"]|snakify}}.example.id}"
		{% endif -%}
		description = "%s"
		{% for arg in hierarchy[-1]['args'].keys()|list -%}
		{% if arg %}
		{{arg}}  = "example"
		{% endif -%}
		{% endfor -%}
		{%for key, prop in pkeys.items() -%}
		{%- if key|snakify not in hierarchy[-1]['args'].keys()|list -%}
		{{"  "+key|snakify}}  = "example"
		{% endif -%}
		{% endfor -%}
	}
	`, description)
}

func testAccCheckAci{{ doc.slug_label }}Exists(name string, {{ doc.slug_label|snakify }} *models.{{ doc.slug_label }}) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]

		if !ok {
			return fmt.Errorf("{{ doc.label }} %s not found", name)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("No {{ doc.label }} dn was set")
		}

		client := testAccProvider.Meta().(*client.Client)

		cont, err := client.Get(rs.Primary.ID)
		if err != nil {
			return err
		}

		{{ doc.slug_label|snakify }}Found := models.{{ doc.slug_label }}FromContainer(cont)
		if {{ doc.slug_label|snakify }}Found.DistinguishedName != rs.Primary.ID {
			return fmt.Errorf("{{ doc.label }} %s not found", rs.Primary.ID)
		}
		*{{ doc.slug_label|snakify }} = *{{ doc.slug_label|snakify }}Found
		return nil
	}
}

func testAccCheckAci{{ doc.slug_label }}Destroy(s *terraform.State) error {
	client := testAccProvider.Meta().(*client.Client)

	for _, rs := range s.RootModule().Resources {
		
		 if rs.Type == "aci_{{ hierarchy[-1]['label']|snakify }}" {
			cont,err := client.Get(rs.Primary.ID)
			{{ doc.slug_label|snakify }} := models.{{ doc.slug_label }}FromContainer(cont)
			if err == nil {
				return fmt.Errorf("{{ doc.label }} %s Still exists",{{ doc.slug_label|snakify }}.DistinguishedName)
			}

		}else{
			continue
		}
	}

	return nil
}

func testAccCheckAci{{ doc.slug_label }}Attributes(description string, {{ doc.slug_label|snakify }}  *models.{{ doc.slug_label }}) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		if description != {{ doc.slug_label|snakify }}.Description {
			return fmt.Errorf("Bad {{ doc.slug_label|snakify }} Description %s", {{ doc.slug_label|snakify }}.Description)
		}
		
{%if pkeys|length != 0 or hierarchy[-1]['args'].keys()|list != 0 %}
	{% for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
		if "example" != {{ doc.slug_label|snakify }}.{{ arg|capital }} {
			return fmt.Errorf("Bad {{ doc.slug_label|snakify }} {{ arg|snakify }} %s", {{ doc.slug_label|snakify }}.{{ arg|capital }})
		}
	{% endif %}
	{% endfor %}
    {% for key in pkeys.keys()|list -%}
	{% if key|snakify not in hierarchy[-1]['args'].keys()|list %}
		if "example" != {{ doc.slug_label|snakify }}.{{ key|capital }} {
			return fmt.Errorf("Bad {{ doc.slug_label|snakify }} {{ key|snakify }} %s", {{ doc.slug_label|snakify }}.{{ key|capital }})
		}
	{% endif %}
    {% endfor %}
{% endif %}
	return nil
	}
}

