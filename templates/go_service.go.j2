package client

{%- set schema_required  = [0] -%}
{%- for rel,relContext in relationTo.items() -%}
{%- if relContext["cardinality"] != 'ONE_TO_ONE' and relContext["cardinality"] != 'N_TO_ONE'  -%}
{% if schema_required.append(schema_required.pop() + 1) %}{% endif %}
{%- endif -%}
{%- endfor %}

import (
	"fmt"

	"github.com/ciscoecosystem/aci-go-client/models"
	{%- if relationTo|length > 0 %}
	"github.com/ciscoecosystem/aci-go-client/container"
	{%- endif %}
	{%- if schema_required.pop() > 0 %}
	"github.com/hashicorp/terraform/helper/schema"
	{% endif %}



	


)

{% set args_list_with_type_reverse -%}
{% for object in hierarchy|reverse %}{% set outer_loop = loop %}{% for arg in object["args"]|reverse %}{{arg}} string {% if loop.index != object["args"]|length %}, {%endif%}{% if (outer_loop.index != hierarchy|length) and (loop.index == object["args"]|length) %},{%endif%}{% endfor %}{% endfor %}
{%- endset %}
{% set args_list_with_type -%}
{% for object in hierarchy %}{% set outer_loop = loop %}{% for arg in object["args"] %}{{arg}} string {% if loop.index != object["args"]|length %}, {%endif%}{% if (outer_loop.index == hierarchy|length) and (loop.index != object["args"]|length) %},{%endif%}{% endfor %}{% endfor %}
{%- endset %}
{% set args_list_reverse -%}
{% for object in hierarchy|reverse %}{% set outer_loop = loop %}{% for arg in object["args"]|reverse %}{{arg}} {% if loop.index != object["args"]|length %}, {%endif%}{% if (outer_loop.index == hierarchy|length) and (loop.index != object["args"]|length) %},{%endif%}{% endfor %}{% endfor %}
{%- endset %}
{% set args_list -%}
{% for object in hierarchy %}{% set outer_loop = loop %}{% for arg in object["args"] %}{% if outer_loop.index > 1 %},{%endif%}{{arg}} {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% endfor %}
{%- endset %}
{% set args_list_minus_last -%}
{% for object in hierarchy[:-1] %}{% set outer_loop = loop %}{% for arg in object["args"] %}{{arg}} {% if loop.index != object["args"]|length %}, {%endif%}{% if (outer_loop.index != hierarchy[:-1]|length) and (loop.index == object["args"]|length) %},{%endif%}{% endfor %}{% endfor %}
{%- endset %}
{% set dn -%}
fmt.Sprintf("uni{% for object in hierarchy %}/{{object["rn"]}}{% endfor %}"{% if args_list %}, {{args_list}}{% endif %})
{%- endset %}
{% set parent_dn -%}
{%- if hierarchy|length > 1 -%}
fmt.Sprintf("uni{% for object in hierarchy[:-1] %}/{{object["rn"]}}{% endfor %}", {{args_list_minus_last}})
{%- else -%}
fmt.Sprintf("uni")
{%- endif -%}
{%- endset %}
{%- set rn -%}
fmt.Sprintf("{{hierarchy[-1]['rn']}}"{%if hierarchy[-1]['args']|length > 0 %},{% endif %}{% for arg in hierarchy[-1]['args']%}{{arg}}{% if loop.index != hierarchy[-1]['args']|length %}, {%endif%}{% endfor %})
{%- endset %}

func (sm *ServiceManager) Create{{doc.slug_label}}({% if args_list_with_type_reverse %}{{args_list_with_type_reverse}}, {% endif %}description string, {{class}}attr models.{{doc.slug_label}}Attributes) (*models.{{doc.slug_label}}, error) {	
	rn := {{ rn }}
	parentDn := {{ parent_dn }}
	{{class}} := models.New{{doc.slug_label}}(rn, parentDn, description, {{class}}attr)
	err := sm.Save({{class}})
	return {{class}}, err
}

func (sm *ServiceManager) Read{{doc.slug_label}}({{args_list_with_type_reverse}}) (*models.{{doc.slug_label}}, error) {
	dn := {{ dn }}    
	cont, err := sm.Get(dn)
	if err != nil {
		return nil, err
	}

	{{class}} := models.{{doc.slug_label}}FromContainer(cont)
	return {{class}}, nil
}

func (sm *ServiceManager) Delete{{doc.slug_label}}({{args_list_with_type_reverse}}) error {
	dn := {{ dn }}
	return sm.DeleteByDn(dn, models.{{class|capitalize}}ClassName)
}

func (sm *ServiceManager) Update{{doc.slug_label}}({% if args_list_with_type_reverse %}{{args_list_with_type_reverse}} ,{% endif %}description string, {{class}}attr models.{{doc.slug_label}}Attributes) (*models.{{doc.slug_label}}, error) {
	rn := {{ rn }}
	parentDn := {{ parent_dn }}
	{{class}} := models.New{{doc.slug_label}}(rn, parentDn, description, {{class}}attr)

    {{class}}.Status = "modified"
	err := sm.Save({{class}})
	return {{class}}, err

}

func (sm *ServiceManager) List{{doc.slug_label}}({% for object in hierarchy[:-1]|reverse %}{% for arg in object["args"]|reverse %}{{arg}} string {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy[:-1]|length%},{%endif%}{% endfor %}) ([]*models.{{doc.slug_label}}, error) {

	baseurlStr := "/api/node/class"	
	dnUrl := fmt.Sprintf("%s/uni{% for object in hierarchy[:-1] %}/{{object["rn"]}}{% endfor %}/{{class}}.json", baseurlStr {% if hierarchy| length > 1 %}, {% endif %}{% for object in hierarchy[:-1] %}{% for arg in object["args"] %}{{arg}} {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy[:-1]|length%},{%endif%}{% endfor %})
    
    cont, err := sm.GetViaURL(dnUrl)
	list := models.{{doc.slug_label}}ListFromContainer(cont)

	return list, err
}

{% for rel,relContext in relationTo.items() %}
{%- set rel_arg_list -%}
{% for object in relContext['hierarchy'][:-1] %}{% for arg in object["args"] %}{{arg}} {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% if loop.index != relContext['hierarchy'][:-1]|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set rel_parent_dn -%}
	{%- if relContext['hierarchy']|length > 1 -%}
		fmt.Sprintf("uni{% for object in relContext['hierarchy'][:-1] %}/{{object["rn"]}}{% endfor %}", {{rel_arg_list}})
	{%- endif -%}
{%- endset -%}
{%- set rel_key_list -%}
{%- if relContext['doc']['identifiedBy'] -%} 
{%- for key in relContext['doc']['identifiedBy'] -%} {{ key }} {%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%} {%- endfor -%}
{%- else -%}
tn{{ relContext['relToClass'][0]|capitalize }}{{ relContext['relToClass'][1:]}}Name
{%- endif -%}
{%- endset -%}
{%- set rel_rn -%}
{{ relContext['hierarchy'][-1]['rn'] }}
{%- endset -%}
func (sm *ServiceManager) CreateRelation{{ rel }}From{{ doc.slug_label }}( parentDn, {{ rel_key_list }} string) error {
	dn := fmt.Sprintf("%s/{{ rel_rn }}", parentDn{%- if relContext['doc']['identifiedBy'] -%}, {{ rel_key_list }}{%- endif -%} )
	containerJSON := []byte(fmt.Sprintf(`{
		"%s": {
			"attributes": {
				"dn": "%s"
				{%- if not relContext['doc']['identifiedBy'] -%}
				,"{{ rel_key_list }}": "%s"
				{% endif %}				
			}
		}
	}`, "{{ rel }}", dn{%- if not relContext['doc']['identifiedBy'] -%},{{ rel_key_list }}{%- endif -%} ))

	jsonPayload, err := container.ParseJSON(containerJSON)
	if err != nil {
		return err
	}

	req, err := sm.client.MakeRestRequest("POST", fmt.Sprintf("%s.json", sm.MOURL), jsonPayload, true)
	if err != nil {
		return err
	}

	cont, _, err := sm.client.Do(req)
	if err != nil {
		return err
	}
	fmt.Printf("%+v", cont)

	return nil
}

{%- if relContext['doc']['deletable'] %}

func (sm *ServiceManager) DeleteRelation{{ rel }}From{{ doc.slug_label }}(parentDn {% if relContext['doc']['identifiedBy'] -%}, {{ rel_key_list }} {% endif -%} string) error{
	dn := fmt.Sprintf("%s/{{ rel_rn }}", parentDn{%- if relContext['doc']['identifiedBy'] -%}, {{ rel_key_list }}{%- endif -%})
	return sm.DeleteByDn(dn , "{{ rel }}")
}
{%- endif %}

func (sm *ServiceManager) ReadRelation{{ rel }}From{{ doc.slug_label }}( parentDn string) (interface{},error) {
	baseurlStr := "/api/node/class"	
	dnUrl := fmt.Sprintf("%s/uni/%s/%s.json",baseurlStr,parentDn,"{{ rel }}")
	cont, err := sm.GetViaURL(dnUrl)

	contList := models.ListFromContainer(cont,"{{ rel }}")
	{% if relContext['doc']['identifiedBy'] -%}
		{%- if relContext['doc']['identifiedBy']|length > 1 %}
			{% if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
	if len(contList) > 0 {
		paramMap := make(map[string]string)
					{% for key in relContext['doc']['identifiedBy'] %}
		paramMap["{{ key }}"] = models.G(contList[0], "{{ key }}")
					{% endfor %}
		return paramMap, err
	} else {
		return nil,err
	}
			{%- else %}
	st := make([]map[string]string, 0)

	for _, contItem := range contList{
		paramMap := make(map[string]string)
		{% for key in relContext['doc']['identifiedBy'] -%}
		paramMap["{{ key }}"] = models.G(contItem, "{{ key }}")
		{% endfor %}
		st = append(st, paramMap)

	}

	return st, err

			{%- endif -%}

	
		{% else %}
			{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
	if len(contList) > 0 {
		dat := models.G(contList[0], "{{ relContext['doc']['identifiedBy'][0] }}")
		return dat, err
	} else {
		return nil,err
	}
			{%- else %}
	st := &schema.Set{
		F: schema.HashString,
	}
	for _, contItem := range contList{
		dat := models.G(contItem, "{{ relContext['doc']['identifiedBy'][0] }}")
		st.Add(dat)
	}
	return st, err
			{% endif -%}
		{%- endif -%}
	
	{% else %}
		{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
	if len(contList) > 0 {
		dat := models.G(contList[0], "{{ rel_key_list }}")
		return dat, err
	} else {
		return nil,err
	}
		{% else %}
	st := &schema.Set{
		F: schema.HashString,
	}
	for _, contItem := range contList{
		dat := models.G(contItem, "{{ rel_key_list }}")
		st.Add(dat)
	}
	return st,err
		{%- endif -%}



	
	{% endif %}





}
{% endfor %}

