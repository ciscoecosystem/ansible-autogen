#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function
__metaclass__ = type

DOCUMENTATION = r'''
---
module: {{filename[:-3]}} {# remove '.py' extention #}
short_description: Manage {{doc.label}} ({{doc.name}})
description:
- {{doc.description}}
notes:
- More information about the internal APIC class B({{doc.name}}) from
  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).
author:
- Devarshi Shah (@devarshishah3)
version_added: '2.7'
options: {% for key, value in keys.items() %}
  {{value.human_name}}:
    description:
    - {{value.help}} {% if value.aliases %}
    aliases: [ {% for x in value.aliases %}{%if not loop.last %}{{x}}, {% endif %}{% endfor %}{{value.aliases[-1]}} ] {% endif %}{% if value.options %}
    choices: [ {% for x in value.options %}{%if not loop.last %}{{x}}, {% endif %}{% endfor %}{{value.options[-1]}} ] {% endif %}{% endfor %}
  state: {% if doc.deletable %}
    description:
    - Use C(present) or C(absent) for adding or removing.
    - Use C(query) for listing an object or multiple objects.
    choices: [ absent, present, query ]
    default: present {% else %}
    description:
    - Use C(present) for configuring an object.
    - Use C(query) for listing an object or multiple objects.
    choices: [ present, query ]
    default: present {% endif %}

extends_documentation_fragment: aci
'''

from ansible_collections.cisco.aci.plugins.module_utils.aci import ACIModule, aci_argument_spec
from ansible.module_utils.basic import AnsibleModule

def main():
    argument_spec = aci_argument_spec()
    argument_spec.update({ {% for key, value in keys.items()%}
        '{{value.human_name}}': dict(type='str',{%if value['options']|length > 0 %} choices={{value['options']}}, {% endif %}{%if value['aliases']|length > 0 %} aliases={{value['aliases']}}{% endif %}),{% endfor %}
        'state': dict(type='str', default='present', choices=['absent', 'present', 'query']),
{% for rel,relContext in relationTo.items() %}
    {%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' -%}
        {%- if relContext['doc']['identifiedBy']|length > 1 %}
        '{{ relContext.human_name }}': dict(type='dict'),
        {%- else %}
        '{{ relContext.human_name }}': dict(type='str'),
        {%- endif %}
    {%- else %}
        '{{ relContext.human_name }}': dict(type='list'),
    {%- endif %}
{% endfor %}
    })

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        required_if=[ {% if doc.deletable %}
            ['state', 'absent', [{% for key, value in keys.items() %}{% if value['naming']==true %}'{{value.human_name}}', {% endif %}{% endfor %}]], {% endif %}
            ['state', 'present', [{% for key, value in keys.items() %}{% if value['naming']==true %}'{{value.human_name}}', {% endif %}{% endfor %}]],
        ],
    )
    {% for key, value in keys.items() %}
    {{value.var}} = module.params['{{value.human_name}}']{% endfor %}
    state = module.params['state']
    child_configs=[]
    {% for rel,relContext in relationTo.items() %}
    relation_{{ rel|lower }} = module.params['{{ relContext.human_name }}']
    {%- endfor -%}

{% for rel,relContext in relationTo.items() %}
{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
    if relation_{{ rel|lower }}:
    {%- if relContext['doc']['identifiedBy']|length > 1 %}
        child_configs.append({'{{ rel }}':{'attributes': { {% for key in relContext['doc']['identifiedBy'] %} '{{ key }}': relation_{{ rel|lower }}['{{ key }}'] {% if loop.index != relContext['doc']['identifiedBy']|length %},{% endif %} {% endfor %}}}})
    {%- else -%}
{# length of identifiedBy is less than 1 so if identifiedBy is there than use it otherwise use cruft to generate arg name #}
    {%- set rel_arg_name -%}
        {%- if relContext['doc']['identifiedBy'] -%} 
            relContext['doc']['identifiedBy'][0] 
        {%- else -%}
            tn{{ relContext['relToClass'][0]|capitalize }}{{ relContext['relToClass'][1:]}}Name
        {%- endif -%}
    {%- endset %}
        child_configs.append({'{{ rel }}': {'attributes': {'{{ rel_arg_name }}': relation_{{ rel|lower }}}}})
    {%- endif -%}
{%- else %}

    if relation_{{ rel|lower }}:
    {%- if relContext['doc']['identifiedBy']|length > 1 %}
        for relation_param in relation_{{ rel|lower }}:
            child_configs.append({'{{ rel }}':{'attributes': { {% for key in relContext['doc']['identifiedBy'] %}'{{ key }}': relation_param['{{ key }}'] {% if loop.index != relContext['doc']['identifiedBy']|length %},{% endif %} {% endfor %}}}})
    {%- else -%}
        {%- set rel_arg_name -%}
        {%- if relContext['doc']['identifiedBy'] -%} 
            {{ relContext['doc']['identifiedBy'][0] }}
        {%- else -%}
            tn{{ relContext['relToClass'][0]|capitalize }}{{ relContext['relToClass'][1:]}}Name
        {%- endif -%}
        {%- endset %}
        for relation_param in relation_{{ rel|lower }}:
            child_configs.append({'{{ rel }}': {'attributes': {'{{ rel_arg_name }}': relation_param}}})
    {%- endif %}
{%- endif -%}
{%- endfor %}

    aci = ACIModule(module)
    aci.construct_url({% for object in hierarchy %}{% if loop.index0 == 0 %}
        root_class={
            'aci_class': '{{object.name}}',
            'aci_rn': {{object.rn}},
            'target_filter': {{object.filter}},
            'module_object': {{object.args[0]}}
        }, {% endif %}{% if loop.index0 == 1 %}
        subclass_1={
            'aci_class': '{{object.name}}',
            'aci_rn': {{object.rn}},
            'target_filter': {{object.filter}},
            'module_object': {{object.args[0]}}
        }, {% endif %}{% if loop.index0 == 2 %}
        subclass_2={
            'aci_class': '{{object.name}}',
            'aci_rn': {{object.rn}},
            'target_filter': {{object.filter}},
            'module_object': {{object.args[0]}}
        }, {% endif %}{% if loop.index0 == 3 %}
        subclass_3={
            'aci_class': '{{object.name}}',
            'aci_rn': {{object.rn}},
            'target_filter': {{object.filter}},
            'module_object': {{object.args[0]}}
        }, {% endif %}{% endfor %}
        
        child_classes=[{% for rel,relContext in relationTo.items() %}'{{ rel }}'{%- if loop.index != relationTo|length -%},{%- endif -%}{% endfor %}]
        
    )

    aci.get_existing()

    if state == 'present':
        aci.payload(
            aci_class='{{class}}',
            class_config={ {% for key, value in pkeys.items() %}
                '{{value.payload}}': {{value.var}},{% endfor %}
            },
            child_configs=child_configs
           
        )

        aci.get_diff(aci_class='{{class}}')

        aci.post_config()

    elif state == 'absent':
        aci.delete_config()

    aci.exit_json()

if __name__ == "__main__":
    main()
