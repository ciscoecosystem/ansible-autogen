package models


import (
	"fmt"
	"strconv"

	"github.com/ciscoecosystem/aci-go-client/container"
)

{%- set args_list_with_type_reverse -%}
{% for object in hierarchy|reverse %}{% for arg in object["args"].keys()|list|reverse %}{{arg}} string {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{% set args_list_with_type -%}
{% for object in hierarchy %}{% for arg in object["args"].keys()|list %}{{arg}} string {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set args_list_reverse -%}
{% for object in hierarchy|reverse %}{% for arg in object["args"].keys()|list|reverse %}{{arg}} {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set args_list -%}
{% for object in hierarchy %}{% for arg in object["args"].keys()|list %}{{arg}} {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set dn -%}
fmt.Sprintf("uni{% for object in hierarchy %}/{{object["rn"]}}{% endfor %}", {{args_list}})
{%- endset -%}
{%- set rn -%}
fmt.Sprintf("{{hierarchy[-1]['rn']}}",{% for arg in hierarchy[-1]['args'].keys()|list %}{{arg}}{% if loop.index != hierarchy[-1]['args'].keys()|list|length %}, {%endif%}{% endfor %})
{%- endset %}

const {{class|capitalize}}ClassName = "{{class}}"

type {{doc.slug_label}} struct {
	BaseAttributes
    {%if pkeys|length != 0 -%}
	{{doc.slug_label}}Attributes
    {%-endif %} 
}
  {%if pkeys|length != 0 %}
type {{doc.slug_label}}Attributes struct {
	{% for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
	{{ arg|capital }} string `json:",omitempty"`
	{% endif %}
	{% endfor %}
    {% for key in pkeys.keys()|list -%}
	{% if key|snakify not in hierarchy[-1]['args'].keys()|list %}
	{{key|capital}}       string `json:",omitempty"`
	{% endif %}
    {% endfor %}
}
  {%endif %} 

func New{{doc.slug_label}}({{class}}Rn, parentDn, description string, {{class}}attr {{doc.slug_label}}Attributes) *{{doc.slug_label}} {
	dn := fmt.Sprintf("%s/%s", parentDn, {{class}}Rn)  
	return &{{doc.slug_label}}{
		BaseAttributes: BaseAttributes{
			DistinguishedName: dn,
			Description:       description,
			Status:            "created, modified",
			ClassName:         {{class|capitalize}}ClassName,
			Rn:                {{class}}Rn,
		},
        {%if pkeys|length != 0 or hierarchy[-1]['args'].keys()|list != 0%}
		{{doc.slug_label}}Attributes: {{class}}attr,
        {% endif %} 
	}
}

func ({{class}} *{{doc.slug_label}}) ToMap() (map[string]string, error) {
	{{class}}Map, err := {{class}}.BaseAttributes.ToMap()
	if err != nil {
		return nil, err
	}

	{% for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
	A({{class}}Map, "{{hierarchy[-1]['args'][arg]}}",{{class}}.{{arg|capital}})
	{% endif %}
	{% endfor %}
    {% for key in pkeys.keys()|list -%}
	{% if key|snakify not in hierarchy[-1]['args'].keys()|list %}
	A({{class}}Map, "{{pkeys[key]['payload']}}",{{class}}.{{key|capital}})
	{% endif %}
    {% endfor %}
	

	return {{class}}Map, err
}

func {{doc.slug_label}}FromContainerList(cont *container.Container, index int) *{{doc.slug_label}} {

	{{doc.slug_label}}Cont := cont.S("imdata").Index(index).S({{class|capitalize}}ClassName, "attributes")
	return &{{doc.slug_label}}{
		BaseAttributes{
			DistinguishedName: G({{doc.slug_label}}Cont, "dn"),
			Description:       G({{doc.slug_label}}Cont, "descr"),
			Status:            G({{doc.slug_label}}Cont, "status"),
			ClassName:         {{class|capitalize}}ClassName,
			Rn:                G({{doc.slug_label}}Cont, "rn"),
		},
        {%if pkeys|length != 0 %}
		{{doc.slug_label}}Attributes{
		{% for arg in hierarchy[-1]['args'].keys()|list %}
		{% if arg %}
			{{arg|capital}} : G({{doc.slug_label}}Cont, "{{hierarchy[-1]['args'][arg]}}"),
		{% endif %}
		{% endfor %}
        {% for key in pkeys.keys()|list -%}
		{% if key|snakify not in hierarchy[-1]['args'].keys()|list %}
	        {{key|capital}} : G({{doc.slug_label}}Cont, "{{pkeys[key]['payload']}}"),
		{% endif %}
        {% endfor %}		
        },
        {% endif %}
	}
}

func {{doc.slug_label}}FromContainer(cont *container.Container) *{{doc.slug_label}} {

	return {{doc.slug_label}}FromContainerList(cont, 0)
}

func {{doc.slug_label}}ListFromContainer(cont *container.Container) []*{{doc.slug_label}} {
	length, _ := strconv.Atoi(G(cont, "totalCount"))

	arr := make([]*{{doc.slug_label}}, length)

	for i := 0; i < length; i++ {

		arr[i] = {{doc.slug_label}}FromContainerList(cont, i)
	}

	return arr
}
