package aci



{%- set args_list_with_type_reverse -%}
{% for object in hierarchy|reverse %}{% for arg in object["args"]|reverse %}{{arg}} string {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{% set args_list_with_type -%}
{% for object in hierarchy %}{% for arg in object["args"] %}{{arg}} string {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set args_list_reverse -%}
{% for object in hierarchy|reverse %}{% for arg in object["args"]|reverse %}{{arg}} {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set args_list -%}
{% for object in hierarchy %}{% for arg in object["args"] %}{{arg}} {% if loop.index != object["args"]|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set dn -%}
fmt.Sprintf("uni{% for object in hierarchy %}/{{object["rn"]}}{% endfor %}", {{args_list}})
{%- endset -%}
{%- set rn -%}
fmt.Sprintf("{{hierarchy[-1]['rn']}}",{% for arg in hierarchy[-1]['args']%}{{arg}}{% if loop.index != hierarchy[-1]['args']|length %}, {%endif%}{% endfor %})
{%- endset %}
{%- set name -%}
fmt.Sprintf("{{hierarchy[-1]['rn']}}",{% for arg in hierarchy[-1]['args']%}{{arg}}{% if loop.index != hierarchy[-1]['args']|length %}, {%endif%}{% endfor %})
{%- endset %}
{%- set validation_required -%}
{%for key, prop in pkeys.items() %}{%- if prop["options"]| length != 0 -%}{%- if loop.index != pkey|length -%}true{%- else -%}false{%- endif -%}{%- endif -%}{% endfor %}
{%- endset -%}

import (
	"fmt"

	"github.com/ciscoecosystem/aci-go-client/client"
	"github.com/ciscoecosystem/aci-go-client/models"
	"github.com/hashicorp/terraform/helper/schema"
	{%- if validation_required %}
	"github.com/hashicorp/terraform/helper/validation"
	{%- endif %}
)

func resourceAci{{doc.slug_label}}() *schema.Resource {
	return &schema.Resource{
		Create: resourceAci{{doc.slug_label}}Create,
		Update: resourceAci{{doc.slug_label}}Update,
		Read:   resourceAci{{doc.slug_label}}Read,
		Delete: resourceAci{{doc.slug_label}}Delete,

		Importer: &schema.ResourceImporter{
			State: resourceAci{{doc.slug_label}}Import,
		},

		SchemaVersion: 1,

		Schema: AppendBaseAttrSchema(map[string]*schema.Schema{
			{% if hierarchy| length > 1 -%}
			"{{hierarchy[-2]["name"]|snakify}}_dn": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
			},
			{% endif -%}
			{% for arg in hierarchy[-1]['args']%}
			"{{arg}}": &schema.Schema{
				Type: schema.TypeString,
				Required: true,
			},
			{% endfor %}
            {%for key, prop in pkeys.items() %}
			"{{key|snakify}}": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				Description: "{{prop["help"]}}",
                {% if prop["options"]| length != 0 %}
				ValidateFunc: validation.StringInSlice([]string{
				{%for option in prop["options"] -%}
                 	"{{option}}",
                {% endfor -%}
				}, false),
                {% endif %}
			},
            {% endfor %}
		}),
	}
}

func getRemote{{doc.slug_label}}(client *client.Client, dn string) (*models.{{doc.slug_label}}, error) {
	{{class}}Cont, err := client.Get(dn)
	if err != nil {
		return nil, err
	}

	{{class}} := models.{{doc.slug_label}}FromContainer({{class}}Cont)

	if {{class}}.DistinguishedName == "" {
		return nil, fmt.Errorf("Bridge Domain %s not found", {{class}}.DistinguishedName)
	}

	return {{class}}, nil
}

func set{{doc.slug_label}}Attributes({{class}} *models.{{doc.slug_label}}, d *schema.ResourceData) *schema.ResourceData {
	d.SetId({{class}}.DistinguishedName)
	d.Set("description", {{class}}.Description)
	{%- if hierarchy| length > 1 %}
	d.Set("{{hierarchy[-2]["name"]|snakify}}_dn", GetParentDn({{class}}.DistinguishedName))
	{%- endif %}
	{{ class }}_map , _ := {{ class }}.ToMap()
    {% for key in pkeys.keys() %} 
	d.Set("{{key|snakify}}", {{class}}_map["{{key}}"])
    {%- endfor %}
	return d
}

func resourceAci{{doc.slug_label}}Import(d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {

	aciClient := m.(*client.Client)

	dn := d.Id()

	{{class}}, err := getRemote{{doc.slug_label}}(aciClient, dn)

	if err != nil {
		return nil, err
	}
	schemaFilled := set{{doc.slug_label}}Attributes({{class}}, d)
	return []*schema.ResourceData{schemaFilled}, nil
}

func resourceAci{{doc.slug_label}}Create(d *schema.ResourceData, m interface{}) error {
	aciClient := m.(*client.Client)
	desc := d.Get("description").(string)
	{%- for arg in hierarchy[-1]['args']%}
	{{arg}} := d.Get("{{arg}}").(string)
	{%- endfor %}
	{%- if hierarchy|length > 1 %}
	{{hierarchy[-2]["name"]}}Dn := d.Get("{{hierarchy[-2]["name"]|snakify}}_dn").(string)
	{% endif %}
	{{class}}Attr := models.{{doc.slug_label}}Attributes{}

    {%- for key in pkeys.keys() %} 
    if {{key|capital}}, ok := d.GetOk("{{key|snakify}}"); ok {
        {{class}}Attr.{{key|capital}}  = {{key|capital}}.(string)
    }
    {%- endfor %}
	{%- if hierarchy|length > 1 %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},{{hierarchy[-2]["name"]}}Dn, desc, {{class}}Attr)  
	{% else %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},"uni", desc, {{class}}Attr)  
	{%- endif %}


	err := aciClient.Save({{class}})
	if err != nil {
		return err
	}

	d.SetId({{class}}.DistinguishedName)
	return resourceAci{{doc.slug_label}}Read(d, m)
}

func resourceAci{{doc.slug_label}}Update(d *schema.ResourceData, m interface{}) error {
	aciClient := m.(*client.Client)
	desc := d.Get("description").(string)

	{% for arg in hierarchy[-1]['args'] %}
	{{arg}} := d.Get("{{arg}}").(string)
	{%- endfor -%}
	
	{% if hierarchy| length > 1 %}
	{{hierarchy[-2]["name"]}}Dn := d.Get("{{hierarchy[-2]["name"]|snakify}}_dn").(string)
	{% endif %}

    {{class}}Attr := models.{{doc.slug_label}}Attributes{}
    {%- for key in pkeys.keys() %}     
    if {{key|capital}}, ok := d.GetOk("{{key|snakify}}"); ok {
        {{class}}Attr.{{key|capital}} = {{key|capital}}.(string)
    }
    {%- endfor -%}
	{% if hierarchy|length > 1 %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},{{hierarchy[-2]["name"]}}Dn, desc, {{class}}Attr)  
	{% else %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},"uni", desc, {{class}}Attr)  
	{% endif %}	

	{{class}}.Status = "modified"

	err := aciClient.Save({{class}})
	
	if err != nil {
		return err
	}

	d.SetId({{class}}.DistinguishedName)
	return resourceAci{{doc.slug_label}}Read(d, m)

}

func resourceAci{{doc.slug_label}}Read(d *schema.ResourceData, m interface{}) error {
	aciClient := m.(*client.Client)

	dn := d.Id()
	{{class}}, err := getRemote{{doc.slug_label}}(aciClient, dn)

	if err != nil {
		return err
	}
	set{{doc.slug_label}}Attributes({{class}}, d)
	return nil
}

func resourceAci{{doc.slug_label}}Delete(d *schema.ResourceData, m interface{}) error {
	aciClient := m.(*client.Client)
	dn := d.Id()
	err := aciClient.DeleteByDn(dn, "{{class}}")
	if err != nil {
		return err
	}

	d.SetId("")
	return err
}
