package aci




{%- set args_list_with_type_reverse -%}
{% for object in hierarchy|reverse %}{% for arg in object["args"].keys()|list|reverse %}{{arg}} string {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{% set args_list_with_type -%}
{% for object in hierarchy %}{% for arg in object["args"].keys()|list %}{{arg}} string {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set args_list_reverse -%}
{% for object in hierarchy|reverse %}{% for arg in object["args"].keys()|list|reverse %}{{arg}} {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set args_list -%}
{% for object in hierarchy %}{% for arg in object["args"].keys()|list %}{{arg}} {% if loop.index != object["args"].keys()|list|length %}, {%endif%}{% endfor %}{% if loop.index != hierarchy|length%},{%endif%}{% endfor %}
{%- endset -%}
{%- set dn -%}
fmt.Sprintf("uni{% for object in hierarchy %}/{{object["rn"]}}{% endfor %}", {{args_list}})
{%- endset -%}
{%- set rn -%}
fmt.Sprintf("{{hierarchy[-1]['rn']}}"{% if hierarchy[-1]['args'].keys()|list|length > 0%},{% endif %}{% for arg in hierarchy[-1]['args'].keys()|list%}{{arg}}{% if loop.index != hierarchy[-1]['args'].keys()|list|length %}, {%endif%}{% endfor %})
{%- endset %}
{%- set name -%}
fmt.Sprintf("{{hierarchy[-1]['rn']}}"{% if hierarchy[-1]['args'].keys()|list|length > 0%},{% endif %}{% for arg in hierarchy[-1]['args'].keys()|list%}{{arg}}{% if loop.index != hierarchy[-1]['args'].keys()|list|length %}, {%endif%}{% endfor %})
{%- endset %}
{%- set validation_required -%}
{%for key, prop in pkeys.items() %}{%- if prop["options"]| length != 0 -%}{%- if loop.index != pkey|length -%}true{%- else -%}false{%- endif -%}{%- endif -%}{% endfor %}
{%- endset %}


import (
	"fmt"
	"log"

	"github.com/ciscoecosystem/aci-go-client/client"
	"github.com/ciscoecosystem/aci-go-client/models"
	"github.com/hashicorp/terraform/helper/schema"
)

func resourceAci{{doc.slug_label}}() *schema.Resource {
	return &schema.Resource{
		Create: resourceAci{{doc.slug_label}}Create,
		Update: resourceAci{{doc.slug_label}}Update,
		Read:   resourceAci{{doc.slug_label}}Read,
		Delete: resourceAci{{doc.slug_label}}Delete,

		Importer: &schema.ResourceImporter{
			State: resourceAci{{doc.slug_label}}Import,
		},

		SchemaVersion: 1,

		Schema: AppendBaseAttrSchema(map[string]*schema.Schema{
			{% if hierarchy| length > 1 -%}
			"{{hierarchy[-2]["label"]|snakify}}_dn": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
			},
			{% endif -%}
			{% for arg in hierarchy[-1]['args'].keys()|list%}
			{% if arg %}
			"{{arg}}": &schema.Schema{
				Type: schema.TypeString,
				Required: true,
			},
			{% endif %}
			{% endfor %}
	
            {%for key, prop in pkeys.items() %}
			{% if key|snakify not in hierarchy[-1]['args'].keys()|list %}
			"{{key|snakify}}": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			{% endif %}
            {% endfor %}
			{% for rel,relContext in relationTo.items() %}
			{%- if relContext['doc']['identifiedBy']|length > 1 %}
			{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
			"relation_{{ rel|snakify }}": &schema.Schema{
				Type: schema.TypeMap,
				Optional: true,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			{%- else %}
			"relation_{{ rel|snakify }}": &schema.Schema{
			    Type: schema.TypeSet,
				Optional: true,
				Elem:     &schema.Resource{ 
							Schema: map[string]*schema.Schema{
							{%- for key in relContext['doc']['identifiedBy'] %}
									"{{ key|snakify }}": {
										Type: schema.TypeString,
										Required: true,
									},
							{%- endfor %}
							},
				
				},
			},
			{%- endif -%}
			{%- else %}
			"relation_{{ rel|snakify }}": &schema.Schema{
				Type: {%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}     schema.TypeString, {%- else %}     schema.TypeSet,{%- endif %}
{% if relContext["cardinality"] != 'ONE_TO_ONE' and relContext["cardinality"] != 'N_TO_ONE' %}				Elem:     &schema.Schema{ Type: schema.TypeString,},{% endif %}
				Optional: 	 true,
{% if relContext["cardinality"] != 'ONE_TO_ONE' and relContext["cardinality"] != 'N_TO_ONE' %}     			Set:         schema.HashString,{% endif %}
			},
			{%- endif -%}
			{%- endfor %}

		}),
	}
}
func getRemote{{doc.slug_label}}(client *client.Client, dn string) (*models.{{doc.slug_label}}, error) {
	{{class}}Cont, err := client.Get(dn)
	if err != nil {
		return nil, err
	}

	{{class}} := models.{{doc.slug_label}}FromContainer({{class}}Cont)

	if {{class}}.DistinguishedName == "" {
		return nil, fmt.Errorf("{{ doc.slug_label}} %s not found", {{class}}.DistinguishedName)
	}

	return {{class}}, nil
}

func set{{doc.slug_label}}Attributes({{class}} *models.{{doc.slug_label}}, d *schema.ResourceData) *schema.ResourceData {
	d.SetId({{class}}.DistinguishedName)
	d.Set("description", {{class}}.Description)
	{%- if hierarchy| length > 1 %}
	d.Set("{{hierarchy[-2]["label"]|snakify}}_dn", GetParentDn({{class}}.DistinguishedName))
	{%- endif %}
	{{ class }}Map , _ := {{ class }}.ToMap()
	{% for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
	d.Set("{{arg|snakify}}", {{class}}Map["{{hierarchy[-1]['args'][arg]}}"])
	{% endif %}
	{% endfor %}
    {% for key in pkeys.keys()|list %} 
	d.Set("{{key|snakify}}", {{class}}Map["{{pkeys[key]['payload']}}"])
    {%- endfor %}
	return d
}

func resourceAci{{doc.slug_label}}Import(d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
	log.Printf("[DEBUG] %s: Beginning Import", d.Id())
	aciClient := m.(*client.Client)

	dn := d.Id()

	{{class}}, err := getRemote{{doc.slug_label}}(aciClient, dn)

	if err != nil {
		return nil, err
	}
	schemaFilled := set{{doc.slug_label}}Attributes({{class}}, d)
	
	log.Printf("[DEBUG] %s: Import finished successfully", d.Id())

	return []*schema.ResourceData{schemaFilled}, nil
}

func resourceAci{{doc.slug_label}}Create(d *schema.ResourceData, m interface{}) error {
	log.Printf("[DEBUG] {{doc.slug_label}}: Beginning Creation")
	aciClient := m.(*client.Client)
	desc := d.Get("description").(string)
	{%- for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
	{{arg}} := d.Get("{{arg}}").(string)
	{% endif %}
	{%- endfor %}
	{%- if hierarchy|length > 1 %}
	{{hierarchy[-2]["label"]}}Dn := d.Get("{{hierarchy[-2]["label"]|snakify}}_dn").(string)
	{% endif %}
	{{class}}Attr := models.{{doc.slug_label}}Attributes{}

    {%- for key in pkeys.keys()|list %} 
    if {{key|capital}}, ok := d.GetOk("{{key|snakify}}"); ok {
        {{class}}Attr.{{key|capital}}  = {{key|capital}}.(string)
    }
    {%- endfor %}
	{%- if hierarchy|length > 1 %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},{{hierarchy[-2]["label"]}}Dn, desc, {{class}}Attr)  
	{% else %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},"uni", desc, {{class}}Attr)  
	{%- endif %}
	
	err := aciClient.Save({{class}})
	if err != nil {
		return err
	}
	d.Partial(true)
	{%- for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
	d.SetPartial("{{arg}}")
	{% endif %}
	{%- endfor %}
	d.Partial(false)

	{% for rel,relContext in relationTo.items() %}
	{%- if relContext['doc']['identifiedBy']|length > 1 %}
	if relationTo{{ rel }}, ok := d.GetOk("relation_{{ rel|snakify }}"); ok {
	{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		relationParamMap := relationTo{{ rel }}.(map[string]interface{})
		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}relationParamMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})
		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)

	{%- else %}

		relationParamList := relationTo{{ rel }}.(*schema.Set).List()
		for _, relationParam := range relationParamList {
			paramMap := relationParam.(map[string]interface{})
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}paramMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)
		}
	
	{%- endif %}

	}
	{%- else %}
	if  relationTo{{ rel }}, ok := d.GetOk("relation_{{ rel|snakify }}") ; ok {
		{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		relationParam := relationTo{{ rel }}.(string)
		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, relationParam)
		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)
		{% else %}
		relationParamList := toStringList(relationTo{{ rel }}.(*schema.Set).List())
		for _, relationParam := range relationParamList {
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, relationParam)
		
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)
		}
		{%- endif %}
	}
	{%- endif %}
	{%- endfor %}

	d.SetId({{class}}.DistinguishedName)
	log.Printf("[DEBUG] %s: Creation finished successfully", d.Id())

	return resourceAci{{doc.slug_label}}Read(d, m)
}

func resourceAci{{doc.slug_label}}Update(d *schema.ResourceData, m interface{}) error {
	log.Printf("[DEBUG] {{doc.slug_label}}: Beginning Update")

	aciClient := m.(*client.Client)
	desc := d.Get("description").(string)

	{% for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
	{{arg}} := d.Get("{{arg}}").(string)
	{% endif %}
	{%- endfor -%}
	
	{% if hierarchy| length > 1 %}
	{{hierarchy[-2]["label"]}}Dn := d.Get("{{hierarchy[-2]["label"]|snakify}}_dn").(string)
	{% endif %}

    {{class}}Attr := models.{{doc.slug_label}}Attributes{}
    {%- for key in pkeys.keys()|list %}     
    if {{key|capital}}, ok := d.GetOk("{{key|snakify}}"); ok {
        {{class}}Attr.{{key|capital}} = {{key|capital}}.(string)
    }
    {%- endfor -%}
	{% if hierarchy|length > 1 %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},{{hierarchy[-2]["label"]}}Dn, desc, {{class}}Attr)  
	{% else %}
	{{class}} := models.New{{doc.slug_label}}({{rn}},"uni", desc, {{class}}Attr)  
	{% endif %}	

	{{class}}.Status = "modified"

	err := aciClient.Save({{class}})
	
	if err != nil {
		return err
	}
	d.Partial(true)
	{%- for arg in hierarchy[-1]['args'].keys()|list %}
	{% if arg %}
	d.SetPartial("{{arg}}")
	{% endif %}
	{%- endfor %}
	d.Partial(false)
	{% for rel,relContext in relationTo.items() %}
	{%- if relContext['doc']['deletable'] %} 
	if d.HasChange("relation_{{ rel | snakify }}") {
	{%- if relContext['doc']['identifiedBy']|length > 1 %}
	{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		oldRelParam, newRelParam := d.GetChange("relation_{{ rel | snakify }}")
		oldRelParamMap := oldRelParam.(map[string]interface{})
		newRelParamMap := newRelParam.(map[string]interface{})
		err = aciClient.DeleteRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}oldRelParamMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})
		
		if err != nil {
			return err
		}

		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}newRelParamMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})

		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)
	{%- else %}
		oldRel, newRel := d.GetChange("relation_{{ rel|snakify }}")
		oldRelList := oldRel.(*schema.Set).List()
		newRelList := newRel.(*schema.Set).List()
		for _, relationParam := range oldRelList{
			paramMap := relationParam.(map[string]interface{})
			err = aciClient.DeleteRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}paramMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})
			if err != nil {
				return err
			}

		}
		for _, relationParam := range newRelList{
			paramMap := relationParam.(map[string]interface{})
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}paramMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)
		}
	{%- endif %}
	{%- elif relContext['doc']['identifiedBy']|length == 1  %}
	{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		oldRelParam, newRelParam := d.GetChange("relation_{{ rel | snakify }}")
		err = aciClient.DeleteRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, oldRelParam.(string))
		if err != nil {
			return err
		}
		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, newRelParam.(string))
		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)
	{%- else %}
		oldRel, newRel := d.GetChange("relation_{{ rel|snakify }}")
		oldRelSet := oldRel.(*schema.Set)
		newRelSet := newRel.(*schema.Set)
		relToDelete := toStringList(oldRelSet.Difference(newRelSet).List())
		relToCreate := toStringList(newRelSet.Difference(oldRelSet).List())

		for _, relDn := range relToDelete {
			err = aciClient.DeleteRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, relDn)
			if err != nil {
				return err
			}

		}

		for _, relDn := range relToCreate {
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, relDn)
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)

		}

	{%- endif %}
	{%- else %}

	{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		_, newRelParam := d.GetChange("relation_{{ rel | snakify }}")
		err = aciClient.DeleteRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName)
		if err != nil {
			return err
		}
		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, newRelParam.(string))
		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)
	{% else %}
		oldRel, newRel := d.GetChange("relation_{{ rel|snakify }}")
		oldRelSet := oldRel.(*schema.Set)
		newRelSet := newRel.(*schema.Set)

		relToDelete := toStringList(oldRelSet.Difference(newRelSet).List())
		relToCreate := toStringList(newRelSet.Difference(oldRelSet).List())

		if relToDelete != nil {
			err = aciClient.DeleteRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName)
			if err != nil {
				return err
			}

		}

		for _, relDn := range relToCreate {
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, relDn)
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)

		}
	{%- endif %}
	{%- endif %}
{# code related to undeletable relations #}
	{% else %}
	if d.HasChange("relation_{{ rel | snakify }}") {
	{%- if relContext['doc']['identifiedBy']|length > 1 %}
	{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		_, newRelParam := d.GetChange("relation_{{ rel | snakify }}")
		newRelParamMap := newRelParam.(map[string]interface{})

		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}newRelParamMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})

		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)
	{%- else %}
		_, newRel := d.GetChange("relation_{{ rel|snakify }}")
		newRelList := newRel.(*schema.Set).List()

		for _, relationParam := range newRelList{
			paramMap := relationParam.(map[string]interface{})
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName,{%- for key in relContext['doc']['identifiedBy'] %}paramMap["{{ key|snakify }}"].(string){%- if loop.index != relContext['doc']['identifiedBy']|length -%},{%- endif -%}{%- endfor %})
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)
		}
	{%- endif %}
	{%- elif relContext['doc']['identifiedBy']|length == 1  %}
	{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		_, newRelParam := d.GetChange("relation_{{ rel | snakify }}")

		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, newRelParam.(string))
		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)
	{%- else %}
		oldRel, newRel := d.GetChange("relation_{{ rel|snakify }}")
		oldRelSet := oldRel.(*schema.Set)
		newRelSet := newRel.(*schema.Set)
		relToCreate := toStringList(newRelSet.Difference(oldRelSet).List())



		for _, relDn := range relToCreate {
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, relDn)
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)

		}

	{%- endif %}
	{%- else %}

	{%- if relContext["cardinality"] == 'ONE_TO_ONE' or relContext["cardinality"] == 'N_TO_ONE' %}
		_, newRelParam := d.GetChange("relation_{{ rel | snakify }}")
		err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, newRelParam.(string))
		if err != nil {
			return err
		}
		d.Partial(true)
		d.SetPartial("relation_{{ rel|snakify }}")
		d.Partial(false)
	{% else %}
		oldRel, newRel := d.GetChange("relation_{{ rel|snakify }}")
		oldRelSet := oldRel.(*schema.Set)
		newRelSet := newRel.(*schema.Set)

		relToCreate := toStringList(newRelSet.Difference(oldRelSet).List())



		for _, relDn := range relToCreate {
			err = aciClient.CreateRelation{{ rel }}From{{ doc.slug_label }}({{ class }}.DistinguishedName, relDn)
			if err != nil {
				return err
			}
			d.Partial(true)
			d.SetPartial("relation_{{ rel|snakify }}")
			d.Partial(false)

		}
	{%- endif %}
	{%- endif %}
	
	{% endif %}   
	}
	{%- endfor %}

	d.SetId({{class}}.DistinguishedName)
	log.Printf("[DEBUG] %s: Update finished successfully", d.Id())

	return resourceAci{{doc.slug_label}}Read(d, m)

}

func resourceAci{{doc.slug_label}}Read(d *schema.ResourceData, m interface{}) error {
	log.Printf("[DEBUG] %s: Beginning Read",d.Id())

	aciClient := m.(*client.Client)

	dn := d.Id()
	{{class}}, err := getRemote{{doc.slug_label}}(aciClient, dn)

	if err != nil {
		d.SetId("")
		return nil
	}
	set{{doc.slug_label}}Attributes({{class}}, d)
	{% for rel,relContext in relationTo.items() %}
	{{ rel }}Data, err := aciClient.ReadRelation{{ rel }}From{{ doc.slug_label }}(dn)
	if err != nil {
		log.Printf("[DEBUG] Error while reading relation {{ rel }} %v", err)

	} else {
		d.Set("relation_{{ rel|snakify }}",{{ rel }}Data)
	}
	{% endfor %}
	log.Printf("[DEBUG] %s: Read finished successfully",d.Id())

	return nil
}

func resourceAci{{doc.slug_label}}Delete(d *schema.ResourceData, m interface{}) error {
	log.Printf("[DEBUG] %s: Beginning Destroy",d.Id())

	aciClient := m.(*client.Client)
	dn := d.Id()
	err := aciClient.DeleteByDn(dn, "{{class}}")
	if err != nil {
		return err
	}
	
	log.Printf("[DEBUG] %s: Destroy finished successfully",d.Id())

	d.SetId("")
	return err
}
